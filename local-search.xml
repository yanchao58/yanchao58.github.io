<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>背包问题浅析</title>
    <link href="/2021/06/24/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E6%B5%85%E6%9E%90/"/>
    <url>/2021/06/24/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E6%B5%85%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p>背包问题是一种组合优化的NP完全问题。</p><p>背包问题可以描述为：有N个物品和一个容量为W的背包，每个物品都有自己的体积w和价值v，我们怎样拿物品可以使得背包所装下物品的总价值最大？</p><p>如果限定每种物品只能选择0个或者1个，那么就称为0-1背包问题。</p><p>如果不限定每种物品的数量，则称为完全背包问题。</p><p>当然，背包问题还有其它变种，在此只分析0-1背包问题和完全背包问题。</p><h2 id="2-0-1背包问题"><a href="#2-0-1背包问题" class="headerlink" title="2 0-1背包问题"></a>2 0-1背包问题</h2><p>背包问题可以用动态规划来解决。</p><p>对于0-1背包问题而言，我们可以定义一个二维数组dp来存储最大价值，其中，dp[i][j]表示前i件物品的体积不超过j的情况下，能达到的最大价值。</p><p>在我们遍历到第i件物品时，在当前背包容量为j的情况下，如果我们不将物品i放入背包，那么dp[i][j] = dp[i-1][j]，也就是说前i件物品的最大价值只取决于前i-1件物品的最大价值；如果我们将物品i放入背包，假设第i件物品的体积为w，价值为v，那么dp[i][j] = dp[i-1][j-w] + v,也就是说，前i件物品的最大价值就等于前i-1件物品放满容量为j-w的背包的时候的最大价值再加上第i件物品的价值。</p><p>解决0-1背包问题的代码如下所示。总的时间复杂度和空间复杂度都为$O(NM)$。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">knapSack</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] weights, <span class="hljs-keyword">int</span>[] values, <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> W)</span></span>&#123;<br>    <span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N+<span class="hljs-number">1</span>][W+<span class="hljs-number">1</span>];<br>    <span class="hljs-comment">//这里挖去了i=0和j=0的情况，是因为，拿前0件物品不会产生价值，背包容量为0也不会产生价值，价值就是0</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)&#123;<br>        <span class="hljs-keyword">int</span> w = weights[i-<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> v = values[i-<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= W; j++)&#123;<br>            <span class="hljs-keyword">if</span>(j &lt; w)&#123;<br>                <span class="hljs-comment">//当前物品的体积大于容量，那么肯定不能拿了</span><br>                dp[i][j] = dp[i-<span class="hljs-number">1</span>][j];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                dp[i][j] = Math.max(dp[i-<span class="hljs-number">1</span>][j],dp[i-<span class="hljs-number">1</span>][j-w]+v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[N][W];<br>&#125;<br></code></pre></td></tr></table></figure><p>可以在空间上对0-1背包进行优化，空间复杂度可以降到$O(W)$。</p><p>从上面的代码，我们可以发现，遍历到第i件物品时的最大价值<strong>只取决于前i-1件物品的最大价值</strong>，所以可以去掉二维dp数组的第一个维度。</p><p>但是要注意，内层循环遍历容量的时候要逆向遍历，因为我们是要利用上一轮外层循环得到的值（也就是遍历完i-1件物品后的dp值），如果正向遍历的话，那么上一轮外层循环得到的值就被更新了，比如dp[j-w]就被更新为本轮循环的新值了，无法利用了。这块比较抽象，多想想就明白了。</p><p>优化后的代码下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">knapSack</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] weights, <span class="hljs-keyword">int</span>[] values, <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> W)</span></span>&#123;<br>    <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[W+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)&#123;<br>        <span class="hljs-keyword">int</span> w = weights[i-<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> v = values[i-<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = w; j &lt;= W; j++)&#123;<br>            dp[j] = Math.max(dp[j],dp[j-w] + v);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[W];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>具体题目分析：</strong></p><p>题目链接：<a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">https://leetcode-cn.com/problems/partition-equal-subset-sum/</a></p><p>给你一个只包含正整数的非空数组nums。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p>比如，输入是[1,5,11,5]，由于数组可以分割成[1,5,5]和[11]，所以返回true。</p><p><strong>分析：</strong>求两个子集和元素和相等，那么就是看能不能在这个数组中找到一个子集，子集的元素和为数组的总的元素和的一半，这样就转化成0-1背包问题，只是dp数组的含义需要稍作改变。</p><p>代码实现如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">canPartition</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> num : nums)&#123;<br>        sum += num;<br>    &#125;<br>    <span class="hljs-keyword">if</span>((sum &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> target = sum &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-comment">//dp[j]表示遍历到数组中的当前元素时是否可以有一种选取方案，使得选取的元素的和为j</span><br>    <span class="hljs-keyword">boolean</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[target+<span class="hljs-number">1</span>];<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-keyword">true</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>        <span class="hljs-keyword">int</span> num = nums[i-<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = target; j &gt;= num; j--)&#123;<br>            dp[j] = dp[j] || dp[j-num];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[target];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-完全背包问题"><a href="#3-完全背包问题" class="headerlink" title="3 完全背包问题"></a>3 完全背包问题</h2><p>在完全背包问题中，一个物品可以拿无限次。</p><p>在我们遍历到第i件物品时，如果我们不将物品i放入背包，那么dp[i][j] = dp[i-1][j]；如果我们将物品i放入背包，那么dp[i][j] = dp[i][j-w]，这个时候就跟0-1背包不一样了，因为物品可以放无限次，而背包容量是有限的，所以可以尽可能的放，所以转移到dp[i][j-w]。这里也是比较抽象，需要多多思考下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">knapSack</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] weights, <span class="hljs-keyword">int</span>[] values, <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> W)</span></span>&#123;<br>    <span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N+<span class="hljs-number">1</span>][W+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)&#123;<br>        <span class="hljs-keyword">int</span> w = weights[i-<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> v = values[i-<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= W; j++)&#123;<br>            <span class="hljs-keyword">if</span>(j &lt; w)&#123;<br>                dp[i][j] = dp[i-<span class="hljs-number">1</span>][j];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                dp[i][j] = Math.max(dp[i-<span class="hljs-number">1</span>][j],dp[i][j-w] + v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[N][W];<br>&#125;<br></code></pre></td></tr></table></figure><p>同样，完全背包问题也可以进行空间压缩，空间复杂度可以降到$O(W)$。</p><p>但是，和0-1背包问题不同的是，完全背包问题的内层循环必须要正向遍历，因为需要利用到新值dp[j-w]。</p><p>优化后的代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">knapSack</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] weights, <span class="hljs-keyword">int</span>[] values, <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> W)</span></span>&#123;<br>    <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[W+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)&#123;<br>        <span class="hljs-keyword">int</span> w = weights[i-<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> v = values[i-<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = w; j &lt;= W; j++)&#123;<br>            dp[j] = Math.max(dp[j],dp[j-w]+v);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[W];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>具体题目分析：</strong></p><p>题目链接：<a href="https://leetcode-cn.com/problems/coin-change/">https://leetcode-cn.com/problems/coin-change/</a></p><p>给定不同面额的硬币coins和一个总金额amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。你可以认为每种硬币的数量是无限的。</p><p><strong>分析：</strong>硬币可以使用无限多次，这道题本质上就是完全背包问题，dp数组除了dp[0]为0以外，其它元素要初始化为amount+1，因为循环内部涉及到了取最小值，而amount金额最多的组成方式就是全部由1元硬币组成，所以amount+1一定大于所有的可能值，取最小值时一定不会是它，若最后的结果还是amount+1，则说明找不到组合方式，返回-1。</p><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">coinChange</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] coins, <span class="hljs-keyword">int</span> amount)</span> </span>&#123;<br>    <span class="hljs-comment">//dp[i]表示组成金额为i的最少硬币数</span><br>    <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[amount+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">int</span> n = coins.length;<br>    Arrays.fill(dp,amount+<span class="hljs-number">1</span>);<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">int</span> coin = coins[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = coin; j &lt;= amount; j++)&#123;<br>            dp[j] = Math.min(dp[j],dp[j-coin] + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[amount] == amount + <span class="hljs-number">1</span> ? -<span class="hljs-number">1</span> : dp[amount];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><p>背包问题一般是由动态规划来解决的，其中使用多维的动态规划数组比较容易理解，但是有时候某一维度可以省略，可以把数组维度压缩下，比如二维变一维，这样就可以节约空间了。时间上目前没有优化方法。</p><p>压缩的时候要注意，对于0-1背包问题，内层循环要逆向遍历，因为它要参考上一轮外层循环得到的旧值，而对于完全背包问题，需要参考新值，所以要正向遍历。</p><p>关于背包问题，现在暂时掌握了这么多，以后慢慢深入学习完善。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>背包问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发编程---AQS详解</title>
    <link href="/2021/06/10/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B---AQS%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/06/10/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B---AQS%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p>AQS全称AbstractQueuedSynchronizer，也就是队列同步器，以下简称为同步器。它是用来构建锁或者其它同步组件的基础框架。</p><p>它使用了一个int成员变量来表示同步状态，通过内置的FIFO队列来完成请求资源的线程的排队工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> state;<br></code></pre></td></tr></table></figure><p>AQS原理如下图所示。</p><p><img src="/img/image-20210610163443294.png" alt="image-20210610163443294"></p><p>AQS的排队机制是用基于CLH锁实现的。</p><p>关于CLH的解释有如下两个。</p><blockquote><p>CLH：是一个自旋锁，能避免线程饥饿，提供先来先服务的公平性。</p><p>CLH锁也是一种基于链表的可扩展、高性能、公平的自旋锁，申请线程只在本地变量上自旋，它不断轮询前驱节点的状态，如果发现前驱节点释放了锁就结束自旋。</p></blockquote><p>AQS同步器的设计是基于模板方法模式的，使用者需要继承同步器并重写指定的方法，随后将同步器组合在自定义同步组件的实现中，并调用同步器提供的模板方法，而这些模板方法将会调用使用者重写的方法。</p><p>重写同步器指定的方法时，需要使用同步器提供的如下3个方法来访问或修改同步状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取当前同步状态</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getState</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> state;<br>&#125;<br><span class="hljs-comment">//设置当前同步状态</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setState</span><span class="hljs-params">(<span class="hljs-keyword">int</span> newState)</span> </span>&#123;<br>        state = newState;<br>&#125;<br><span class="hljs-comment">//使用CAS设置当前状态，该方法能够保证状态设置的原子性</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">compareAndSetState</span><span class="hljs-params">(<span class="hljs-keyword">int</span> expect, <span class="hljs-keyword">int</span> update)</span> </span>&#123;<br>        <span class="hljs-comment">// See below for intrinsics setup to support this</span><br>        <span class="hljs-keyword">return</span> unsafe.compareAndSwapInt(<span class="hljs-keyword">this</span>, stateOffset, expect, update);<br>&#125;<br></code></pre></td></tr></table></figure><p>同步器可重写的方法如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//独占式获取同步状态，成功返回true，反之为false</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryAcquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span></span>;<br><span class="hljs-comment">//独占式释放同步状态，等待中的线程将有机会获取到同步状态</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryRelease</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span></span>;<br><span class="hljs-comment">//共享式获取同步状态，返回大于等于0的值表示获取成功，反之，获取失败</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-title">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span></span>;<br><span class="hljs-comment">//共享式释放同步状态</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span></span>;<br><span class="hljs-comment">//是否被当前线程所独占</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isHeldExclusively</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>同步器提供的模板方法基本上分为3类：独占式获取与释放同步状态、共享式获取与释放同步状态和查询同步队列中的等待线程情况。在此就不列举出具体API了。</p><h2 id="2-使用方式"><a href="#2-使用方式" class="headerlink" title="2 使用方式"></a>2 使用方式</h2><p>以实现一个独占锁为例，我们需要先去继承AbstractQueuedSynchronized这个类，然后重写tryAcquire，tryRelease方法，若是要实现共享锁，那就重写tryAcquireShared，tryReleaseShared方法。最后在我们自定义的同步组件类里面调用AQS提供的模板方法就行了。前面介绍过，AQS提供的模板方法内部会调用我们重写的方法。这样，实现一个自定义同步组件就变得很容易了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//我们自定义的同步组件</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mutex</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Lock</span> </span>&#123;<br><br>    <span class="hljs-comment">//静态内部类，自定义同步器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractQueuedSynchronizer</span></span>&#123;<br><br>        <span class="hljs-comment">//当状态为0时获取锁</span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryAcquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span>(compareAndSetState(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))&#123;<br>                setExclusiveOwnerThread(Thread.currentThread());<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//释放锁，将状态设置为0</span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryRelease</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span>(getState() == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalMonitorStateException();<br>            &#125;<br>            setExclusiveOwnerThread(<span class="hljs-keyword">null</span>);<br>            setState(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//是否处于占用状态</span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isHeldExclusively</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> getState() == <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-function">Condition <span class="hljs-title">newCondition</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ConditionObject();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync = <span class="hljs-keyword">new</span> Sync();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span> </span>&#123;<br>        sync.acquire(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        sync.acquireInterruptibly(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sync.tryAcquire(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">(<span class="hljs-keyword">long</span> time, TimeUnit unit)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">return</span> sync.tryAcquireNanos(<span class="hljs-number">1</span>,unit.toNanos(time));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span><span class="hljs-params">()</span> </span>&#123;<br>        sync.release(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Condition <span class="hljs-title">newCondition</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sync.newCondition();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对我们的自定义同步组件做个小测试：用两个线程分别对a累加10000次，如果不加锁的话，那么每次的输出结果都可能会不一样。</p><p>用自定义的同步组件进行加锁，如果没问题的话，那么每次都会输出20000。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo1</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Mutex mutex = <span class="hljs-keyword">new</span> Mutex();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Runnable task = <span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)&#123;<br>                    inc();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        Thread thread1 = <span class="hljs-keyword">new</span> Thread(task);<br>        Thread thread2 = <span class="hljs-keyword">new</span> Thread(task);<br>        thread1.start();<br>        thread2.start();<br>        <span class="hljs-keyword">try</span> &#123;<br>            thread1.join();<br>            thread2.join();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(a);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inc</span><span class="hljs-params">()</span></span>&#123;<br>        mutex.lock();<br>        a++;<br>        mutex.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>经测试，我们自定义的同步组件是正确的。</p><h2 id="3-实现原理分析"><a href="#3-实现原理分析" class="headerlink" title="3 实现原理分析"></a>3 实现原理分析</h2><h3 id="3-1-同步队列"><a href="#3-1-同步队列" class="headerlink" title="3.1 同步队列"></a>3.1 同步队列</h3><p>同步器依赖内部的同步队列（一个FIFO的<strong>双向队列</strong>）来完成同步状态的管理。当前线程获取同步状态失败时，同步器会将当前线程以及等待状态等信息构造成为一个节点并将其加入同步队列，同时会阻塞当前线程，当同步状态释放时，会把首节点的线程唤醒，使其再次尝试获取同步状态。</p><p>同步队列中的节点用来保存获取同步状态失败的线程引用、等待状态以及前驱和后继节点。</p><p>同步队列的基本结构如下图所示。</p><p><img src="/img/image-20210610182717276.png" alt="image-20210610182717276"></p><p>同步器包含两个两个节点类型的引用，一个指向头结点，一个指向尾结点。</p><p>当一个线程成功地获取了同步状态，其它线程就无法获取到同步状态，从而被构造成节点加入到同步队列中。</p><p>加入队列的过程必须要保证线程安全，因此同步器提供了一个基于CAS的设置尾结点的方法：compareAndSetTail。</p><p>同步队列的首节点是获取同步状态成功的节点，首节点的线程在释放同步状态时，会唤醒后继节点，而后继节点在<strong>获取同步状态成功后</strong>就会把自己设置成首节点。由于只有一个线程能成功获取到同步状态，因此设置头节点的方法不需要用CAS来保证。</p><h3 id="3-2-独占式同步状态的获取与释放"><a href="#3-2-独占式同步状态的获取与释放" class="headerlink" title="3.2 独占式同步状态的获取与释放"></a>3.2 独占式同步状态的获取与释放</h3><p>通过调用同步器的acquire方法可以获取同步状态。</p><p>该方法对中断不敏感，也就是说，当某个线程因获取同步状态失败而进入同步队列时，后续对其进行中断操作，并不会让该线程从同步队列中移出。</p><p>acquire方法的代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">acquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!tryAcquire(arg) &amp;&amp;<br>        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))<br>        selfInterrupt();<br>&#125;<br></code></pre></td></tr></table></figure><p>主要逻辑：</p><p>（1）首先调用自定义同步器实现的tryAcquire方法，该方法保证线程安全地获取同步状态，成功获取则不再执行后面的逻辑；</p><p>（2）如果同步状态获取失败，就构造Node.EXCLUSIVE类型的同步节点，并通过addWaiter方法将该节点添加到同步队列的尾部；</p><p>（3）最后调用acquireQueued方法，使得该节点以死循环的方式获取同步状态。如果获取不到就阻塞<strong>节点中的线程</strong>，被阻塞的线程主要依靠<strong>前驱节点的出队或线程被中断</strong>来唤醒。</p><p>addWaiter方法的代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> Node <span class="hljs-title">addWaiter</span><span class="hljs-params">(Node mode)</span> </span>&#123;<br>    Node node = <span class="hljs-keyword">new</span> Node(Thread.currentThread(), mode);<br>    <span class="hljs-comment">// Try the fast path of enq; backup to full enq on failure</span><br>    Node pred = tail;<br>    <span class="hljs-keyword">if</span> (pred != <span class="hljs-keyword">null</span>) &#123;<br>        node.prev = pred;<br>        <span class="hljs-keyword">if</span> (compareAndSetTail(pred, node)) &#123;<br>            pred.next = node;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>    &#125;<br>    enq(node);<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要逻辑：构造一个节点Node，并使用compareAndSetTail方法来确保节点能被<strong>线程安全</strong>地添加到同步队列的尾部。</p><p>AQS之所以不用普通的LinkedList，而采用CLH实现队列。是因为可能有多个线程调用tryAcquire方法获取同步状态失败而<strong>并发</strong>地被添加到队列尾部，所以要保证线程安全，而LinkedList是线程不安全的，采用LinkedList就可能导致节点数量有偏差，顺序会混乱。</p><p>enq方法的代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> Node <span class="hljs-title">enq</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        Node t = tail;<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// Must initialize</span><br>            <span class="hljs-keyword">if</span> (compareAndSetHead(<span class="hljs-keyword">new</span> Node()))<br>                tail = head;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            node.prev = t;<br>            <span class="hljs-keyword">if</span> (compareAndSetTail(t, node)) &#123;<br>                t.next = node;<br>                <span class="hljs-keyword">return</span> t;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>若CAS失败，则会进入enq方法。在enq方法中，同步器通过死循环的方式来保证节点的正确添加，在死循环中只有通过CAS将节点设置成为尾结点之后，当前线程才会从该方法返回。</p><p>acquireQueued方法的代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-keyword">boolean</span> failed = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">boolean</span> interrupted = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">final</span> Node p = node.predecessor();<br>            <span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;<br>                setHead(node);<br>                p.next = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// help GC</span><br>                failed = <span class="hljs-keyword">false</span>;<br>                <span class="hljs-keyword">return</span> interrupted;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;<br>                parkAndCheckInterrupt())<br>                interrupted = <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>节点进入同步队列之后，就进入到一个自旋的过程，若当前节点的前驱节点是头结点且成功获取到了同步状态，就可以从这个自旋过程中退出。第一个if不满足的话，就判断第二个if，调用shouldParkAfterFailedAcquire判断当前节点中的线程是否应该被阻塞，若是的话，就调用parkAndCheckInterrupt阻塞当前线程，直到线程被中断或被前驱节点唤醒。</p><p>总结一下，独占式同步状态的获取流程如下图所示。</p><p><img src="/img/image-20210610201001724.png" alt="image-20210610201001724"></p><p>当前线程获取同步状态并执行相应的逻辑之后，就需要释放同步状态，使得后续节点能继续获取同步状态。</p><p>通过调用同步器的release方法可以释放同步状态，代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">release</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;<br>        Node h = head;<br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-keyword">null</span> &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)<br>            unparkSuccessor(h);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当调用tryRelease方法释放同步状态成功后会调用unparkSuccessor方法来唤醒头节点的后继节点。unparkSuccessor方法内部使用LockSupport来唤醒处于等待状态的线程。</p><h3 id="3-3-共享式同步状态的获取与释放"><a href="#3-3-共享式同步状态的获取与释放" class="headerlink" title="3.3 共享式同步状态的获取与释放"></a>3.3 共享式同步状态的获取与释放</h3><p>共享式获取与独占式获取最主要的区别在于同一时刻能否有多个线程同时获取到同步状态。</p><p>以文件的读写为例，如果一个程序正在对文件进行读操作，那么这一时刻对该文件的读操作是可以同时进行的，而写操作是不被允许的。也就是说，写操作要求对资源的独占式访问，而读操作可以是共享式访问。</p><p>通过调用同步器的acquireShared方法可以共享式地获取同步状态，代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">acquireShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tryAcquireShared(arg) &lt; <span class="hljs-number">0</span>)<br>        doAcquireShared(arg);<br>&#125;<br></code></pre></td></tr></table></figure><p>在acquireShared方法中，同步器调用tryAcquireShared方法尝试获取同步状态，当返回值大于等于0时，表示能获取到同步状态，否则就调用doAcquireShared方法。</p><p>doAcquireShared方法的代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doAcquireShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> Node node = addWaiter(Node.SHARED);<br>    <span class="hljs-keyword">boolean</span> failed = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">boolean</span> interrupted = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">final</span> Node p = node.predecessor();<br>            <span class="hljs-keyword">if</span> (p == head) &#123;<br>                <span class="hljs-keyword">int</span> r = tryAcquireShared(arg);<br>                <span class="hljs-keyword">if</span> (r &gt;= <span class="hljs-number">0</span>) &#123;<br>                    setHeadAndPropagate(node, r);<br>                    p.next = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// help GC</span><br>                    <span class="hljs-keyword">if</span> (interrupted)<br>                        selfInterrupt();<br>                    failed = <span class="hljs-keyword">false</span>;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;<br>                parkAndCheckInterrupt())<br>                interrupted = <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先构造Node.SHARED类型的节点，添加到同步队列的尾部。然后以死循环的方式获取同步状态，</p><p>若获取成功，就调用setHeadAndPropagate方法，setHeadAndPropagate方法内部就是把当前节点设置为头节点，然后如果还有可用资源的话，就继续传播下去。</p><p>若获取失败，则判断当前线程是否应该被阻塞，是的话就阻塞，直到线程被中断或被前驱节点唤醒。</p><p>通过调用同步器的releaseShared方法可以释放同步状态，代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">releaseShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tryReleaseShared(arg)) &#123;<br>        doReleaseShared();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法在释放同步状态后，将会唤醒后续处于等待状态的节点。对于能够支持多个线程同时访问的并发组件（比如Semaphore），它和独占式的主要区别在于tryReleaseShared方法必须确保同步状态<strong>线程安全</strong>地释放，一般是通过循环CAS来保证的，因为释放同步状态的操作会来自多个线程。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><p>AQS是Java并发编程中很多同步组件的构建基础，它的实现主要是通过一个整型的状态变量和一个FIFO的双向队列来完成。</p><p>同步队列的头节点是当前获取到同步状态的节点，获取同步状态失败的线程将会被构造成一个节点（独占式或共享式），然后节点会被<strong>线程安全</strong>地添加到同步队列的尾部，随后线程会阻塞。</p><p>头节点释放同步状态时会唤醒后继节点，后继节点就可以继续尝试获取同步状态了（后继节点不一定一下就获取成功，因为此时还有同步队列之外的线程参与竞争）。</p><p>当我们使用AQS构建自定义同步组件时，只需要重写tryAcquire、tryRelease、tryAcquireShared、tryReleaseShared等方法来决定如何获取和释放同步状态。至于线程是如何排队的，如何阻塞和唤醒线程，如何保证线程安全，AQS在上层已经帮我们实现了。</p><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5 参考"></a>5 参考</h2><ul><li>《Java并发编程的艺术》</li></ul>]]></content>
    
    
    <categories>
      
      <category>并发编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发</tag>
      
      <tag>AQS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解虚拟内存机制-01</title>
    <link href="/2021/06/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6-01/"/>
    <url>/2021/06/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6-01/</url>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p>虚拟内存是现代操作系统中存储器管理的一项重要技术，实现了内存扩充功能。但并不是从物理上实际扩大内存容量，而是从逻辑上实现内存容量的扩充。这样计算机就可以运行一些比实际的物理内存大的应用程序。</p><p>虚拟内存很适合在多道程序设计系统中使用，许多程序的片段同时保存在内存中。当一个程序等待它的一部分读入内存时，可以把CPU交给另一个进程使用。</p><h2 id="2-基本思想"><a href="#2-基本思想" class="headerlink" title="2 基本思想"></a>2 基本思想</h2><p>每个程序拥有自己的地址空间，这个地址空间被分为许多个页，每个页都有连续的地址范围。这些页被映射到物理内存，并不是所有的页都必须在内存中才能运行程序。当程序引用到一部分在物理内存中的地址空间时，由硬件立刻执行必要的映射。当程序引用一部分不在物理内存中的地址空间时，由操作系统负责将缺失的部分装入物理内存并重新执行失败的指令。</p><h2 id="3-分页"><a href="#3-分页" class="headerlink" title="3 分页"></a>3 分页</h2><p>大部分虚拟内存系统中都使用了分页技术。</p><p>下图所示为通过MMU访问内存的过程。</p><p><img src="/img/image-20210609113725447.png" alt="image-20210609113725447"></p><p>由程序产生的地址称为虚拟地址，这些地址构成了一个虚拟地址空间。在没有使用虚拟内存的计算机上，系统直接将虚拟地址送到内存总线上，直接使用该地址访问内存；而在使用了虚拟内存的情况下，虚拟地址不是被直接送到内存总线上，而是被送到内存管理单元（MMU），然后MMU把虚拟地址映射为物理地址，再使用物理地址访问内存。</p><p><img src="/img/image-20210609110706717.png" alt="image-20210609110706717"></p><p>虚拟地址空间按固定大小被划分成一个个页，在物理内存中对应的页被称为页框。页与页框大小通常是一样的，上图所示的页与页框的大小都是4KB，在实际系统中的页面大小范围为512字节到1GB。</p><p>对于32位机器来说，每个进程的虚拟地址空间为4GB，而实际上是不可能为每个运行中的进程分配4GB的物理内存，所以虚拟内存技术还需要利用交换技术，也就是页面置换算法。在进程运行期间只把需要使用的数据加载到内存，暂时不需要的就写回磁盘保存，需要用到的时候再加载到内存。</p><h2 id="4-页表"><a href="#4-页表" class="headerlink" title="4 页表"></a>4 页表</h2><p>每次进行虚拟地址到物理地址转换的时候，都需要读取页表。页表由多个页表项组成，页表项的结构取决于机器架构。每个进程都有自己的页表。</p><p>不同计算机的页表项大小可能不一样，通常页表项的大小为32位，即4字节。</p><p>一般来说，页表项都会存储物理页框号、修改位、访问位、保护位和“在/不在”位等信息。</p><p>一个典型的页表项如下图所示：</p><p><img src="/img/image-20210609130403516.png" alt="image-20210609130403516"></p><ul><li>物理页框号：指示虚拟页号对应的物理页框号。</li><li>修改位：对页面进行写入时，会由硬件自动设置修改位。该位在操作系统置换页面时很有用，如果页面已被修改，则需要把页面写回到磁盘中，未被修改就不需要。</li><li>访问位：系统在程序访问页面时自动设置的，该位在页面置换时会使用到，操作系统根据页面是否正在使用来决定是否淘汰掉这个页面，不再使用的页面更适合被淘汰。</li><li>保护位：表示该页面允许的访问类型，0表示可读写，1表示只读。</li><li>“在/不在”位：表示页面是否调入内存，1表示已调入内存，0表示页面不在内存中，访问该位为0的页面时会触发一个缺页中断。</li><li>高速缓存禁止位：用于禁止页面放入CPU高速缓存。对那些映射到设备寄存器的页面而言，这一位是很有用的，可以保证硬件是不断地从设备中读取数据而不是从高速缓存中，这样拿到的数据就是最新的。</li></ul><h2 id="5-地址转换"><a href="#5-地址转换" class="headerlink" title="5 地址转换"></a>5 地址转换</h2><p>下图所示为MMU的工作机制。</p><p><img src="/img/image-20210609132627519.png" alt="image-20210609132627519"></p><p>当页面命中时，计算机中各硬件的交互过程：</p><p>（1）CPU生成一个虚拟地址，通过总线发送到MMU；</p><p>（2）MMU通过虚拟地址中的虚拟页号部分得到页表项在页表中的地址，然后从页表（一般位于CPU高速缓存或内存）中读取该页表项；</p><p>（3）页表项经内存总线送至MMU；</p><p>（4）MMU把页表项中的物理页框号复制到寄存器的高3位，然后把虚拟地址中的12位偏移量复制到寄存器的低12位，构成15位物理地址，然后把寄存器中的物理地址发送到内存总线，访问高速缓存或内存；</p><p>（5）高速缓存或内存返回该物理地址对应的数据给CPU。</p><p>当页面未命中时，计算机中各硬件的交互过程：</p><p>（1）（2）（3）步与页面命中的情况是一样的；</p><p>（4）检查页表项，发现“在/不在”位为0，则MMU触发一次缺页中断，然后CPU转去执行操作系统内核的缺页内核的缺页中断处理程序；</p><p>（5）缺页中断处理程序检查虚拟地址是否合法，确认合法后系统检查是否有空闲的页框可以分配，如果没有空闲页框，就进行页面置换；</p><p>（6）缺页中断处理程序从磁盘中把新的页面调入内存，并更新页表项；</p><p>（7）缺页中断处理程序返回到原来的进程，并重新执行引发缺页中断的指令，再按照上述的页面命中的流程继续走一遍。</p><p>实际上，如果一台计算机同时配备了虚拟内存技术和CPU高速缓存，那么MMU每次都会优先尝试到高速缓存中寻址，如果缓存命中就直接返回，不命中就到内存中寻址。如下图所示。</p><p><img src="/img/image-20210609152206170.png" alt="image-20210609152206170"></p><h2 id="6-加速地址转换和大页表问题"><a href="#6-加速地址转换和大页表问题" class="headerlink" title="6 加速地址转换和大页表问题"></a>6 加速地址转换和大页表问题</h2><p>在任何分页系统中，都需要考虑两个主要问题：</p><p>（1）虚拟地址到物理地址的映射要非常快；</p><p>（2）如果虚拟地址空间很大，页表也会很大。</p><h3 id="6-1-加速地址转换的解决方案"><a href="#6-1-加速地址转换的解决方案" class="headerlink" title="6.1 加速地址转换的解决方案"></a>6.1 加速地址转换的解决方案</h3><p><strong>TLB</strong></p><p>加速地址转换目前的解决方案是为计算机设置一个小型的硬件设备，将虚拟地址直接映射到物理地址，而不必再访问页表。这种设备被称为转换检测缓冲区（TLB），也叫快表。它通常位于MMU中，且含有少量的页表项。</p><p>将一个虚拟地址放入MMU中进行转换时，硬件首先通过虚拟地址中的虚拟页号与TLB中所有表项同时并行进行匹配，判断虚拟页面是否在其中。如果发现了一个有效匹配且访问操作不违反保护位，则将页框号直接从TLB中取出。</p><p>若虚拟页号不在TLB中，就会进行正常的页表查询，然后把页表项放入TLB中，若TLB存储空间不足，就会淘汰掉一个页表项，再把新的页表项放进来。</p><h3 id="6-2-大页表问题的解决方案"><a href="#6-2-大页表问题的解决方案" class="headerlink" title="6.2 大页表问题的解决方案"></a>6.2 大页表问题的解决方案</h3><p><strong>多级页表</strong></p><p>把一个大页表进行拆分，形成多级的页表。32位的虚拟地址可以被划分为10位的一级页表索引、10位的二级页表索引和12位的偏移量。</p><p>引入多级页表的原因是避免把全部页表一直保存在内存中，特别是那些从不需要的页表就不应该保留。</p><p><img src="/img/image-20210609141119889.png" alt="image-20210609141119889"></p><p>以上图为例，我们并不需要为一级页表的每个页表项分配一个二级页表，因为对于大部分进程来说，它们的一级页表中含有许多空置的页表项，那么这部分对应的二级页表也无需存在，这样就可以节约内存。</p><p>在程序运行过程中，只需把一级页表驻留在内存中，在实际需要的时候才去创建、调入、调出二级页表，这样就可以确保那些被频繁使用的二级页表常驻在内存中，极大缓解了内存的压力。</p><p><strong>倒排页表</strong></p><p>在倒排页表中，每个页框对应一个表项，而不是每个虚拟页面对应一个表项。</p><p>比如，对于64位虚拟地址，4KB的页，4GB的RAM，一个倒排页表仅需要1048576个表项，表项记录了哪一个（进程，虚拟页面）对应于该页框。</p><p>在虚拟地址空间远大于物理内存时，倒排页表节省了大量的空间，但是它也有不足：从虚拟地址到物理地址的转换会变得很困难。当进程n访问虚拟页面p时，硬件不再能够把p当做索引来查找物理页框了，而是要搜索整个倒排页表，因为基于倒排页表的设计，MMU并不知道是否会发生缺页，所以必须要进行全表扫描，这样就会很低效。</p><p>可以稍作改进，比如使用TLB记录所有频繁使用的页面，TLB命中的情况下就可能跟普通的页表一样快。TLB不命中的情况下，还是需要扫描整个倒排页表。</p><p>线性扫描的方式非常低效，一般的倒排页表会基于哈希表来实现，以物理页框号为key，（虚拟页号，物理页框号）为value，再实现一个哈希函数，以虚拟地址为入参，假设倒排页表的大小为size，则哈希函数最后输出的哈希值在[0,size-1]区间内，具有相同哈希值的虚拟页面被链接在一起。如果哈希表中的槽数与机器中物理页面数一样多，那么哈希表的冲突链的平均长度将会是一个表项长度，这将会大大提高映射速度。一旦页框号被找到，新的（虚拟页号，物理页框号）就会被装载到TLB中。</p><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7 总结"></a>7 总结</h2><p>虚拟内存对于计算机系统来说非常重要，目前还只是学习了虚拟内存技术的几个核心概念，分页、页表、地址变换等。虚拟内存还有页面置换机制没有深入学习，以后慢慢看书沉淀。</p><h2 id="8-参考"><a href="#8-参考" class="headerlink" title="8 参考"></a>8 参考</h2><ul><li>《计算机操作系统》</li><li>《现代操作系统》</li></ul>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>虚拟内存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见的排序算法总结</title>
    <link href="/2021/05/22/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2021/05/22/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="1-常见的排序算法"><a href="#1-常见的排序算法" class="headerlink" title="1 常见的排序算法"></a>1 常见的排序算法</h2><h3 id="1-1-冒泡排序"><a href="#1-1-冒泡排序" class="headerlink" title="1.1 冒泡排序"></a>1.1 冒泡排序</h3><p><strong>思想：</strong></p><p>第一轮，从第一个元素开始直到最后一个元素，比较相邻的元素，若前一个元素比后一个元素大，那么就交换，一轮下来，最大的元素就会在最后一个位置。</p><p>第二轮，从第一个元素开始直到倒数第二个元素，重复以上步骤。</p><p>以此类推，假设数组长度为n，则一共经过n-1轮后，数组会排好序。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[j] &gt; nums[j + <span class="hljs-number">1</span>])&#123;<br>                swap(nums,j,j + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> temp = nums[i];<br>    nums[i] = nums[j];<br>    nums[j] = temp;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>时间复杂度：$O(n^2)$。</p><p>空间复杂度：$O(1)$。</p><p>稳定性：稳定。</p><h3 id="1-2-插入排序"><a href="#1-2-插入排序" class="headerlink" title="1.2 插入排序"></a>1.2 插入排序</h3><p><strong>思想：</strong></p><p>在待排序的数组中，假设前面n-1个元素已经是有序的了，然后把第n个数插入到前面的有序数组，形成n个元素的有序数组。以此类推。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &gt; <span class="hljs-number">0</span>; j--)&#123;<br>            <span class="hljs-keyword">if</span>(nums[j] &lt; nums[j-<span class="hljs-number">1</span>])&#123;<br>                swap(nums,j,j-<span class="hljs-number">1</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> temp = nums[i];<br>    nums[i] = nums[j];<br>    nums[j] = temp;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>时间复杂度：$O(n^2)$。</p><p>空间复杂度：$O(1)$。</p><p>稳定性：稳定。</p><h3 id="1-3-选择排序"><a href="#1-3-选择排序" class="headerlink" title="1.3 选择排序"></a>1.3 选择排序</h3><p><strong>思想：</strong></p><p>首先，从数组中找出最小的元素，将它与第一个元素交换，然后在除第一个元素之外的剩余元素中找到最小的元素，与第二个元素交换。以此类推。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-keyword">int</span> minIndex = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[j] &lt; nums[minIndex])&#123;<br>                minIndex = j;<br>            &#125;<br>        &#125;<br>        swap(nums,i,minIndex);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> temp = nums[i];<br>    nums[i] = nums[j];<br>    nums[j] = temp;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>时间复杂度：$O(n^2)$。</p><p>空间复杂度：$O(1)$。</p><p>稳定性：不稳定。</p><h3 id="1-4-希尔排序"><a href="#1-4-希尔排序" class="headerlink" title="1.4 希尔排序"></a>1.4 希尔排序</h3><p><strong>思想：</strong></p><p>希尔排序对插入排序做了点改进，先把数组局部排好序，然后最后再插入排序。具体就是让数组中任意距离为h的元素都是有序的，一个h有序的数组相当于h个相互独立的有序数组组织在一起的数组。当h为1的时候，相当于做的是插入排序。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-keyword">int</span> h = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//选取合适的h初值</span><br>    <span class="hljs-keyword">while</span>(h &lt; n / <span class="hljs-number">3</span>)&#123;<br>        h = <span class="hljs-number">3</span> * h + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(h &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &gt;= h; j -= h)&#123;<br>                <span class="hljs-keyword">if</span>(nums[j] &lt; nums[j - h])&#123;<br>                    swap(nums,j,j - h);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        h /= <span class="hljs-number">3</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> temp = nums[i];<br>    nums[i] = nums[j];<br>    nums[j] = temp;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>时间复杂度：$O(n^{1.3})$。</p><p>空间复杂度：$O(1)$。</p><p>稳定性：不稳定。</p><h3 id="1-5-归并排序"><a href="#1-5-归并排序" class="headerlink" title="1.5 归并排序"></a>1.5 归并排序</h3><p><strong>思想：</strong></p><p>采用分治的思想，先将数组的两个子数组排好序，再把它们合并成一个整体有序的数组。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span>[] temp)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(left &gt;= right)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>    mergeSort(nums,left,mid,temp);<br>    mergeSort(nums,mid + <span class="hljs-number">1</span>,right,temp);<br>    <span class="hljs-comment">//归并</span><br>    <span class="hljs-keyword">int</span> i = left;<br>    <span class="hljs-keyword">int</span> j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> index = left;<br>    <span class="hljs-keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= right)&#123;<br>        <span class="hljs-keyword">if</span>(nums[i] &lt;= nums[j])&#123;<br>            temp[index++] = nums[i++];<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            temp[index++] = nums[j++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i &lt;= mid)&#123;<br>        temp[index++] = nums[i++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(j &lt;= right)&#123;<br>        temp[index++] = nums[j++];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = left; k &lt;= right; k++)&#123;<br>        nums[k] = temp[k];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>时间复杂度：$O(nlog_2n)$。</p><p>空间复杂度：$O(n)$。</p><p>稳定性：稳定。</p><h3 id="1-6-快速排序"><a href="#1-6-快速排序" class="headerlink" title="1.6 快速排序"></a>1.6 快速排序</h3><p><strong>思想：</strong></p><p>首先选取一个基准（一般选数组第一个元素），把数组中小于基准值的元素全放到基准值的左边，大于基准值的元素全放到基准值的右边。再对基准值左右两边的数组重复此操作。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(left &gt;= right)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> key = nums[left];<br>    <span class="hljs-keyword">int</span> first = left;<br>    <span class="hljs-keyword">int</span> last = right;<br>    <span class="hljs-keyword">while</span>(first &lt; last)&#123;<br>        <span class="hljs-keyword">while</span>(first &lt; last &amp;&amp; nums[last] &gt;= key)&#123;<br>            last--;<br>        &#125;<br>        nums[first] = nums[last];<br>        <span class="hljs-keyword">while</span>(first &lt; last &amp;&amp; nums[first] &lt;= key)&#123;<br>            first++;<br>        &#125;<br>        nums[last] = nums[first];<br>    &#125;<br>    nums[first] = key;<br>    quickSort(nums,left,first - <span class="hljs-number">1</span>);<br>    quickSort(nums,first + <span class="hljs-number">1</span>,right);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>时间复杂度：$O(nlog_2n)$。</p><p>空间复杂度：$O(nlog_2n)$。</p><p>稳定性：不稳定。</p><h3 id="1-7-堆排序"><a href="#1-7-堆排序" class="headerlink" title="1.7 堆排序"></a>1.7 堆排序</h3><p><strong>思想：</strong></p><p>堆是一个近似完全二叉树的结构，根节点总是存放最大值或者最小值。</p><p>假设数组长度为n，以大顶堆为例，将待排序数组构造成一个大顶堆，此时堆的根节点存放的就是最大值，然后将最大值与数组的末尾元素交换，再把剩下的n-1个元素重新构造成一个大顶堆，重复操作，数组就会排好序。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">heapSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-comment">//构造大顶堆，从最后一个非叶节点开始</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>        adjustHeap(nums,i,n);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n-<span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)&#123;<br>        <span class="hljs-comment">//每次构造完大顶堆后，数组的第一个元素都是最大值，将其交换到末尾</span><br>        swap(nums,<span class="hljs-number">0</span>,i);<br>        <span class="hljs-comment">//交换元素后，调整堆结构，使其仍然保持为大顶堆</span><br>        <span class="hljs-comment">//从索引为0的节点开始调整，是因为下层的节点仍然满足大顶堆的要求，不受交换元素的影响</span><br>        adjustHeap(nums,<span class="hljs-number">0</span>,i);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">adjustHeap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> heapSize)</span></span>&#123;<br>    <span class="hljs-comment">//j保存根节点的索引</span><br>    <span class="hljs-keyword">int</span> j = root;<br>    <span class="hljs-comment">//使用循环，是因为在调整高层节点的结构时可能会影响下层节点的结构</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">2</span> * root + <span class="hljs-number">1</span>; k &lt; heapSize; k = <span class="hljs-number">2</span> * k + <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(k + <span class="hljs-number">1</span> &lt; heapSize &amp;&amp; nums[k] &lt; nums[k + <span class="hljs-number">1</span>])&#123;<br>            <span class="hljs-comment">//使k指向最大的子节点</span><br>            k++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nums[j] &lt; nums[k])&#123;<br>            swap(nums,j,k);<br>            j = k;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> temp = nums[i];<br>    nums[i] = nums[j];<br>    nums[j] = temp;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>时间复杂度：$O(nlog_2n)$。</p><p>空间复杂度：$O(1)$。</p><p>稳定性：不稳定。</p><h2 id="2-总结"><a href="#2-总结" class="headerlink" title="2 总结"></a>2 总结</h2><div class="table-container"><table><thead><tr><th style="text-align:center">排序方法</th><th style="text-align:center">时间复杂度（平均）</th><th>时间复杂度（最好）</th><th>时间复杂度（最坏）</th><th>空间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td style="text-align:center">冒泡排序</td><td style="text-align:center">$O(n^2)$</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td>稳定</td></tr><tr><td style="text-align:center">插入排序</td><td style="text-align:center">$O(n^2)$</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td>稳定</td></tr><tr><td style="text-align:center">选择排序</td><td style="text-align:center">$O(n^2)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td>不稳定</td></tr><tr><td style="text-align:center">希尔排序</td><td style="text-align:center">$O(n^{1.3})$</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td>不稳定</td></tr><tr><td style="text-align:center">归并排序</td><td style="text-align:center">$O(nlog_2n)$</td><td>$O(nlog_2n)$</td><td>$O(nlog_2n)$</td><td>$O(n)$</td><td>稳定</td></tr><tr><td style="text-align:center">快速排序</td><td style="text-align:center">$O(nlog_2n)$</td><td>$O(nlog_2n)$</td><td>$O(n^2)$</td><td>$O(nlog_2n)$</td><td>不稳定</td></tr><tr><td style="text-align:center">堆排序</td><td style="text-align:center">$O(nlog_2n)$</td><td>$O(nlog_2n)$</td><td>$O(nlog_2n)$</td><td>$O(1)$</td><td>不稳定</td></tr></tbody></table></div><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3 参考"></a>3 参考</h2><ul><li>《算法》</li><li>《数据结构（C语言版）》</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
